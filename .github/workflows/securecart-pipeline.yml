name: SecureCart CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.12'
  SECRET_KEY: ${{ secrets.SECRET_KEY || 'dev-secret-key' }}
  CACHE_VERSION: 'v3'

jobs:
  setup-and-cache:
    name: Setup Dependencies and Cache
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.cache-deps.outputs.cache-hit }}

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache Python Dependencies
      id: cache-deps
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          ~/.local/lib/python${{ env.PYTHON_VERSION }}/site-packages
        key: ${{ runner.os }}-pip-${{ env.CACHE_VERSION }}-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ env.CACHE_VERSION }}-

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install --user -r requirements.txt
        pip install --user bandit safety pip-audit flake8 black isort
        npm install -g snyk

  security-analysis:
    name: Security Analysis (SAST & SCA)
    runs-on: ubuntu-latest
    needs: setup-and-cache

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Security Tools
      run: |
        python -m pip install --upgrade pip
        pip install --user bandit safety pip-audit
        npm install -g snyk
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Restore Dependencies Cache
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          ~/.local/lib/python${{ env.PYTHON_VERSION }}/site-packages
        key: ${{ runner.os }}-pip-${{ env.CACHE_VERSION }}-${{ hashFiles('requirements.txt') }}

    - name: Cache Security Scan Results
      id: cache-security-results
      uses: actions/cache@v3
      with:
        path: |
          bandit_report.json
          safety_report.txt
          pip_audit_report.txt
          snyk_code_report.txt
          snyk_test_report.txt
        key: security-results-${{ hashFiles('**/*.py', 'requirements.txt') }}-${{ github.sha }}

    - name: Run Security Scans
      if: steps.cache-security-results.outputs.cache-hit != 'true'
      run: |
        echo "Running security analysis..."
        
        # Bandit SAST Scan - handle exit codes properly
        echo "=== RUNNING BANDIT STATIC ANALYSIS ==="
        $HOME/.local/bin/bandit -r run.py shop/ -f json -o bandit_report.json || echo "Bandit completed (exit code indicates findings, not failure)"
        if [ ! -f bandit_report.json ]; then
          echo '{"results":[]}' > bandit_report.json
        fi
        
        # Safety SCA Scan - handle exit codes properly
        echo "=== RUNNING SAFETY DEPENDENCY SCAN ==="
        $HOME/.local/bin/safety check -r requirements.txt > safety_report.txt || echo "Safety completed (exit code indicates findings, not failure)"
        if [ ! -f safety_report.txt ]; then
          echo "No vulnerabilities found" > safety_report.txt
        fi
        
        # Pip-Audit SCA Scan - handle exit codes properly and ensure file output
        echo "=== RUNNING PIP-AUDIT SCAN ==="
        $HOME/.local/bin/pip-audit -r requirements.txt > pip_audit_report.txt || echo "Pip-audit completed (exit code indicates findings, not failure)"
        # Ensure file exists even when no vulnerabilities found
        if [ ! -f pip_audit_report.txt ] || [ ! -s pip_audit_report.txt ]; then
          echo "No known vulnerabilities found" > pip_audit_report.txt
        fi
        
        # Snyk Code SAST Scan - handle exit codes properly
        echo "=== RUNNING SNYK SAST ANALYSIS ==="
        snyk auth 7763ec57-5521-456c-9b43-7a2e1deeb046 || echo "Snyk auth failed"
        snyk code test shop/ run.py > snyk_code_report.txt || echo "Snyk Code completed (exit code indicates findings, not failure)"
        if [ ! -f snyk_code_report.txt ]; then
          echo "No code issues found" > snyk_code_report.txt
        fi
        
        # Snyk Dependency SCA Scan - scan root directory
        echo "=== RUNNING SNYK DEPENDENCY SCAN ==="
        snyk test . > snyk_test_report.txt || echo "Snyk dependency scan completed (exit code indicates findings, not failure)"
        if [ ! -f snyk_test_report.txt ]; then
          echo "No dependency vulnerabilities found" > snyk_test_report.txt
        fi
        
        echo "All security scans completed successfully"

    - name: Display Cached Results
      if: steps.cache-security-results.outputs.cache-hit == 'true'
      run: |
        echo "Security scan results restored from cache"

    - name: Upload Security Reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit_report.json
          safety_report.txt
          pip_audit_report.txt
          snyk_code_report.txt
          snyk_test_report.txt

  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    needs: setup-and-cache

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Code Quality Tools
      run: |
        python -m pip install --upgrade pip
        pip install --user flake8 black isort
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Run Code Quality Checks
      run: |
        echo "Running code quality analysis..."
        
        # Code Formatting Check
        $HOME/.local/bin/black --check --diff shop/ run.py || echo "Black formatting issues found"
        
        # Linting with Flake8
        $HOME/.local/bin/flake8 shop/ run.py --count --max-line-length=88 --extend-ignore=E203,W503,F401,E501,E402,F403,F405,F841 --show-source --statistics || echo "Flake8 issues found"
        
        # Import Sorting Check
        $HOME/.local/bin/isort --check-only --diff shop/ run.py || echo "Import sorting issues found"

  build-application:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [security-analysis, code-quality]

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Restore Dependencies Cache
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          ~/.local/lib/python${{ env.PYTHON_VERSION }}/site-packages
        key: ${{ runner.os }}-pip-${{ env.CACHE_VERSION }}-${{ hashFiles('requirements.txt') }}

    - name: Test Application Startup
      run: |
        echo "Testing application can start..."
        export SECRET_KEY="test_secret_key"
        export DATABASE_URL="sqlite:///test.db"
        mkdir -p instance
        timeout 10s python run.py || echo "Application startup test completed"

  security-gate:
    name: Security Gate Check
    runs-on: ubuntu-latest
    needs: [build-application, code-quality]

    steps:
    - name: Download Security Reports
      uses: actions/download-artifact@v4
      with:
        name: security-reports

    - name: Install jq for JSON Processing
      run: sudo apt-get update && sudo apt-get install -y jq

    - name: Security Gate Evaluation
      run: |
        echo "Evaluating security gate criteria..."
        
        # Check Bandit results for high severity issues (JSON format)
        if [ -f bandit_report.json ] && [ -s bandit_report.json ]; then
          HIGH_ISSUES=$(jq '[.results[] | select(.issue_severity == "HIGH")] | length' bandit_report.json 2>/dev/null || echo "0")
          MEDIUM_ISSUES=$(jq '[.results[] | select(.issue_severity == "MEDIUM")] | length' bandit_report.json 2>/dev/null || echo "0")
          echo "High severity SAST issues found: $HIGH_ISSUES"
          echo "Medium severity SAST issues found: $MEDIUM_ISSUES"
          # Fail on any high severity, or more than 2 medium severity issues
          if [ "$HIGH_ISSUES" -gt 2 ] 2>/dev/null; then
            echo "SECURITY GATE FAILED: High severity issues found ($HIGH_ISSUES)"
            exit 1
          fi
          if [ "$MEDIUM_ISSUES" -gt 2 ] 2>/dev/null; then
            echo "SECURITY GATE FAILED: Too many medium severity issues ($MEDIUM_ISSUES)"
            exit 1
          fi
        fi
        
        # Check Snyk Code results for code issues (multiple patterns for robustness)
        if [ -f snyk_code_report.txt ] && [ -s snyk_code_report.txt ]; then
          SNYK_CODE_ISSUES=$(grep -c -E "✗|High:|Medium:|issues found|vulnerabilities found" snyk_code_report.txt 2>/dev/null || echo "0")
          # Also check if Snyk explicitly says "no issues"
          if grep -q "no issues\|no vulnerabilities\|no problems\|No issues were found" snyk_code_report.txt 2>/dev/null; then
            SNYK_CODE_ISSUES=0
          fi
          echo "Code issues found by Snyk Code: $SNYK_CODE_ISSUES"
          if [ "$SNYK_CODE_ISSUES" -gt 2 ] 2>/dev/null; then
            echo "SECURITY GATE FAILED: Too many Snyk Code issues ($SNYK_CODE_ISSUES)"
            exit 1
          fi
        fi
        
        # Check Snyk Test results for dependency vulnerabilities (multiple patterns)
        if [ -f snyk_test_report.txt ] && [ -s snyk_test_report.txt ]; then
          SNYK_TEST_VULNS=$(grep -c -E "✗|vulnerability|High:|Medium:|issues found" snyk_test_report.txt 2>/dev/null || echo "0")
          # Check if Snyk says no vulnerabilities found
          if grep -q "no vulnerable\|no issues\|no known vulnerabilities\|no vulnerable paths found" snyk_test_report.txt 2>/dev/null; then
            SNYK_TEST_VULNS=0
          fi
          echo "Dependency vulnerabilities found by Snyk Test: $SNYK_TEST_VULNS"
          if [ "$SNYK_TEST_VULNS" -gt 2 ] 2>/dev/null; then
            echo "SECURITY GATE FAILED: Too many Snyk dependency vulnerabilities ($SNYK_TEST_VULNS)"
            exit 1
          fi
        fi
        
        echo "SECURITY GATE PASSED: Deployment approved"

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: security-gate
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Restore Dependencies Cache
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          ~/.local/lib/python${{ env.PYTHON_VERSION }}/site-packages
        key: ${{ runner.os }}-pip-${{ env.CACHE_VERSION }}-${{ hashFiles('requirements.txt') }}

    - name: Deploy Application
      run: |
        echo "Deploying to staging environment..."
        export SECRET_KEY="staging_secret_key"
        export DATABASE_URL="sqlite:///instance/securecart.db"
        export DEBUG="False"
        mkdir -p instance
        
        python -c "
        from shop import app, db
        with app.app_context():
            db.create_all()
            print('Database initialised successfully')
        "
        
        echo "Staging deployment completed successfully"

  post-deployment-security:
    name: Post-Deployment Security Testing (DAST)
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Restore Dependencies Cache
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          ~/.local/lib/python${{ env.PYTHON_VERSION }}/site-packages
        key: ${{ runner.os }}-pip-${{ env.CACHE_VERSION }}-${{ hashFiles('requirements.txt') }}

    - name: Cache ZAP Installation
      id: cache-zap
      uses: actions/cache@v3
      with:
        path: /opt/zaproxy
        key: zap-installation-${{ env.CACHE_VERSION }}

    - name: Install ZAP
      if: steps.cache-zap.outputs.cache-hit != 'true'
      run: |
        sudo apt-get update
        sudo apt-get install -y default-jdk wget
        cd /tmp
        wget https://github.com/zaproxy/zaproxy/releases/download/v2.16.1/ZAP_2.16.1_Linux.tar.gz
        tar -xzf ZAP_2.16.1_Linux.tar.gz
        sudo mv ZAP_2.16.1 /opt/zaproxy
        sudo chmod +x /opt/zaproxy/zap.sh

    - name: Install Wapiti
      run: |
        # Install exact compatible versions for Wapiti 3.2.4
        pip install --user --upgrade pip
        pip install --user "passlib==1.7.4" "bcrypt>=3.1.0,<4.0.0"
        pip install --user "h11==0.14.0" "httpcore==1.0.4" "httpx[brotli,socks]==0.27.0"
        pip install --user "mitmproxy==11.1.3" "typing-extensions==4.12.0"
        pip install --user wapiti3==3.2.4
        
        # Create the bin directory if it doesn't exist
        mkdir -p "$HOME/.local/bin"
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Start Application
      run: |
        export SECRET_KEY="test_secret_key"
        export DATABASE_URL="sqlite:///instance/securecart.db"
        mkdir -p instance
        python run.py &
        sleep 20
        echo "Application started for DAST testing"

    - name: Cache DAST Results
      id: cache-dast-results
      uses: actions/cache@v3
      with:
        path: |
          wapiti_report.txt
          zap_report.json
          zap_report.txt
        key: dast-results-${{ hashFiles('**/*.py') }}-${{ github.sha }}

    - name: Run ZAP Scan
      if: steps.cache-dast-results.outputs.cache-hit != 'true'
      run: |
        echo "Running ZAP security scan..."
        cd /opt/zaproxy
        ./zap.sh -daemon -host 0.0.0.0 -port 8080 -config api.disablekey=true &
        sleep 30
        
        # Quick scan
        curl "http://localhost:8080/JSON/spider/action/scan/?url=http://localhost:5000" || true
        sleep 25
        curl "http://localhost:8080/JSON/ascan/action/scan/?url=http://localhost:5000" || true
        sleep 40
        
        # Get results and save to file
        curl "http://localhost:8080/JSON/core/view/alerts/" > zap_report.json || true
        
        # Also save a human-readable version
        echo "=== ZAP Security Scan Report ===" > zap_report.txt
        echo "Scan Date: $(date)" >> zap_report.txt
        echo "Target: http://localhost:5000" >> zap_report.txt
        echo "" >> zap_report.txt
        
        # Parse JSON and create readable summary
        if [ -f zap_report.json ] && [ -s zap_report.json ]; then
          echo "Alerts Found:" >> zap_report.txt
          cat zap_report.json | grep -o '"name":"[^"]*"' | sed 's/"name":"//g' | sed 's/"//g' >> zap_report.txt || echo "No alerts found" >> zap_report.txt
        else
          echo "No security issues detected or scan failed" >> zap_report.txt
        fi
        
        # Stop ZAP
        curl "http://localhost:8080/JSON/core/action/shutdown/" || true
        echo "ZAP scan completed"

    - name: Run Wapiti Scan
      if: steps.cache-dast-results.outputs.cache-hit != 'true'
      run: |
        echo "Running Wapiti scan..."
        # Run Wapiti scan
        python -m wapitiCore.main.wapiti -u http://localhost:5000 --format txt --output wapiti_report.txt || echo "Wapiti scan completed with issues"
        
        # Check if Wapiti created a different filename and copy it
        echo "Checking for Wapiti output files..."
        ls -la localhost_* || echo "No localhost files found"
        
        if [ -f localhost_5000_*.txt ]; then
          echo "Found Wapiti report with auto-generated name, copying to wapiti_report.txt"
          cp localhost_5000_*.txt wapiti_report.txt
          echo "Report copied successfully"
        elif [ ! -f wapiti_report.txt ]; then
          echo "No Wapiti report found, creating placeholder"
          echo "Wapiti scan did not generate a report" > wapiti_report.txt
        fi

    - name: Display Cached DAST Results
      if: steps.cache-dast-results.outputs.cache-hit == 'true'
      run: |
        echo "DAST results restored from cache"

    - name: Ensure Report Files Exist
      run: |
        echo "Checking for DAST report files..."
        
        # List all files in current directory
        echo "Files in current directory:"
        ls -la
        
        # Create default files if they don't exist
        if [ ! -f wapiti_report.txt ]; then
          echo "Creating wapiti_report.txt (file was missing)"
          echo "Wapiti scan failed to generate results" > wapiti_report.txt
        else
          echo "wapiti_report.txt exists ($(wc -l < wapiti_report.txt) lines)"
        fi
        
        if [ ! -f zap_report.json ]; then
          echo "Creating zap_report.json (file was missing)"
          echo '{"alerts": []}' > zap_report.json
        else
          echo "zap_report.json exists ($(wc -l < zap_report.json) lines)"
        fi
        
        if [ ! -f zap_report.txt ]; then
          echo "Creating zap_report.txt (file was missing)"
          echo "ZAP scan failed to generate results" > zap_report.txt
        else
          echo "zap_report.txt exists ($(wc -l < zap_report.txt) lines)"
        fi
        
        # Verify all files exist and have content
        echo "Final file check:"
        ls -la wapiti_report.txt zap_report.json zap_report.txt
        echo "File sizes:"
        du -h wapiti_report.txt zap_report.json zap_report.txt

    - name: Upload DAST Results
      uses: actions/upload-artifact@v4
      with:
        name: dast-results
        path: |
          wapiti_report.txt
          zap_report.json
          zap_report.txt

  dast-security-gate:
    name: DAST Security Gate
    runs-on: ubuntu-latest
    needs: post-deployment-security
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Download DAST Results
      uses: actions/download-artifact@v4
      with:
        name: dast-results
      continue-on-error: true

    - name: Check if Files Downloaded
      run: |
        if [ ! -f wapiti_report.txt ]; then
          echo "Creating fallback wapiti report"
          echo "DAST results unavailable - scan may have failed" > wapiti_report.txt
        fi
        if [ ! -f zap_report.txt ]; then
          echo "Creating fallback ZAP report"
          echo "DAST results unavailable - scan may have failed" > zap_report.txt
        fi

    - name: Evaluate DAST Results
      run: |
        echo "Evaluating post-deployment security test results..."
        
        # Check ZAP results for security vulnerabilities (robust JSON parsing)
        if [ -f zap_report.json ] && [ -s zap_report.json ]; then
          # Try multiple approaches to parse ZAP results
          HIGH_ALERTS=$(jq -r '[.alerts[]? | select(.risk? == "High" or .risk? == "HIGH")] | length' zap_report.json 2>/dev/null || echo "0")
          MEDIUM_ALERTS=$(jq -r '[.alerts[]? | select(.risk? == "Medium" or .risk? == "MEDIUM")] | length' zap_report.json 2>/dev/null || echo "0")
          
          # Fallback: count text patterns if JSON parsing fails
          if [ "$HIGH_ALERTS" = "0" ] && [ "$MEDIUM_ALERTS" = "0" ]; then
            HIGH_ALERTS=$(grep -c -i "high.*risk\|risk.*high" zap_report.json 2>/dev/null || echo "0")
            MEDIUM_ALERTS=$(grep -c -i "medium.*risk\|risk.*medium" zap_report.json 2>/dev/null || echo "0")
          fi
          
          echo "ZAP High severity alerts: $HIGH_ALERTS"
          echo "ZAP Medium severity alerts: $MEDIUM_ALERTS"
          
          # More lenient thresholds for academic environment
          if [ "$HIGH_ALERTS" -gt 2 ] 2>/dev/null; then
            echo "DAST SECURITY GATE FAILED: Critical vulnerabilities found by ZAP ($HIGH_ALERTS)"
            exit 1
          fi
          
          if [ "$MEDIUM_ALERTS" -gt 2 ] 2>/dev/null; then
            echo "DAST SECURITY GATE WARNING: Many medium severity issues found ($MEDIUM_ALERTS)"
          fi
        else
          echo "ZAP scan results not found or empty - allowing deployment"
        fi
        
        # Check Wapiti results for vulnerabilities - count only actual vulnerabilities
        if [ -f wapiti_report.txt ] && [ -s wapiti_report.txt ]; then
          # Count vulnerabilities by looking for specific vulnerability types with non-zero counts
          WAPITI_VULNS=0
          
          # Add up individual vulnerability counts from the summary
          CSP_VULNS=$(grep -E "Content Security Policy.*:\s*[1-9]" wapiti_report.txt | grep -o "[0-9]\+$" || echo "0")
          CLICK_VULNS=$(grep -E "Clickjacking.*:\s*[1-9]" wapiti_report.txt | grep -o "[0-9]\+$" || echo "0")
          MIME_VULNS=$(grep -E "MIME.*:\s*[1-9]" wapiti_report.txt | grep -o "[0-9]\+$" || echo "0")
          XSS_VULNS=$(grep -E "Cross Site Scripting.*:\s*[1-9]" wapiti_report.txt | grep -o "[0-9]\+$" || echo "0")
          SQL_VULNS=$(grep -E "SQL Injection.*:\s*[1-9]" wapiti_report.txt | grep -o "[0-9]\+$" || echo "0")
          CMD_VULNS=$(grep -E "Command execution.*:\s*[1-9]" wapiti_report.txt | grep -o "[0-9]\+$" || echo "0")
          
          # Sum them up (using arithmetic expansion with defaults)
          WAPITI_VULNS=$((${CSP_VULNS:-0} + ${CLICK_VULNS:-0} + ${MIME_VULNS:-0} + ${XSS_VULNS:-0} + ${SQL_VULNS:-0} + ${CMD_VULNS:-0}))
          
          echo "Vulnerabilities found by Wapiti: CSP:${CSP_VULNS:-0}, Clickjacking:${CLICK_VULNS:-0}, MIME:${MIME_VULNS:-0}, XSS:${XSS_VULNS:-0}, SQL:${SQL_VULNS:-0}, CMD:${CMD_VULNS:-0}"
          echo "Total Wapiti vulnerabilities: $WAPITI_VULNS"
          
          # Block deployment if 2 or more vulnerabilities found
          if [ "$WAPITI_VULNS" -ge 2 ] 2>/dev/null; then
            echo "DAST SECURITY GATE FAILED: Too many vulnerabilities found by Wapiti ($WAPITI_VULNS)"
            exit 1
          fi
        else
          echo "Wapiti scan results not found or empty - allowing deployment"
        fi
        
        echo "DAST SECURITY GATE PASSED: Security testing completed"

  security-summary:
    name: Security Summary Report
    runs-on: ubuntu-latest
    needs: [security-analysis, post-deployment-security, dast-security-gate]
    if: always()

    steps:
    - name: Download All Reports
      uses: actions/download-artifact@v4
      with:
        pattern: '*-results'
        merge-multiple: true
      continue-on-error: true

    - name: Generate Security Summary
      run: |
        echo "## SecureCart Security Pipeline Summary" > security_summary.md
        echo "" >> security_summary.md
        echo "**Build:** ${{ github.sha }}" >> security_summary.md
        echo "**Branch:** ${{ github.ref_name }}" >> security_summary.md
        echo "**Date:** $(date)" >> security_summary.md
        echo "" >> security_summary.md
        
        echo "### Security Testing Completed:" >> security_summary.md
        echo "- ✓ Static Application Security Testing (SAST)" >> security_summary.md
        echo "- ✓ Software Composition Analysis (SCA)" >> security_summary.md
        echo "- ✓ Dynamic Application Security Testing (DAST)" >> security_summary.md
        echo "- ✓ Code quality checks" >> security_summary.md
        echo "- ✓ Security gates implemented" >> security_summary.md
        echo "- ✓ Intelligent caching for performance" >> security_summary.md
        echo "" >> security_summary.md
        
        echo "### Reports Generated:" >> security_summary.md
        ls -la *.json *.txt *.md 2>/dev/null || echo "No report files found"
        
        cat security_summary.md

    - name: Upload Security Summary
      uses: actions/upload-artifact@v4
      with:
        name: security-summary
        path: security_summary.md