name: SecureCart CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.12'
  SECRET_KEY: ${{ secrets.SECRET_KEY || 'dev-secret-key' }}

jobs:
  setup:
    name: Setup Environment
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache Dependencies
      id: cache-deps
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          ~/.local/lib/python${{ env.PYTHON_VERSION }}/site-packages
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install All Dependencies
      if: steps.cache-deps.outputs.cache-hit != 'true'
      run: |
        python -m pip install --upgrade pip
        pip install --user -r requirements.txt
        pip install --user bandit safety pip-audit flake8 black isort wapiti3
        npm install -g snyk

  security-analysis:
    name: Security Analysis (SAST & SCA)
    runs-on: ubuntu-latest
    needs: setup
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Restore Dependencies Cache
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          ~/.local/lib/python${{ env.PYTHON_VERSION }}/site-packages
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Add Tools to PATH
      run: echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Run SAST Scans
      run: |
        echo "Running Static Application Security Testing..."
        
        # Bandit SAST
        bandit -r run.py shop/ -f json -o bandit_report.json || true
        
        # Snyk Code SAST
        snyk auth ${{ secrets.SNYK_TOKEN || '7763ec57-5521-456c-9b43-7a2e1deeb046' }} || true
        snyk code test . > snyk_code_report.txt || true

    - name: Run SCA Scans
      run: |
        echo "Running Software Composition Analysis..."
        
        # Safety SCA
        safety check -r requirements.txt > safety_report.txt || true
        
        # Pip-Audit SCA
        pip-audit -r requirements.txt > pip_audit_report.txt || true
        
        # Snyk Dependencies SCA
        snyk test . > snyk_test_report.txt || true

    - name: Upload Security Reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit_report.json
          safety_report.txt
          pip_audit_report.txt
          snyk_code_report.txt
          snyk_test_report.txt

  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    needs: setup
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Restore Dependencies Cache
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          ~/.local/lib/python${{ env.PYTHON_VERSION }}/site-packages
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Add Tools to PATH
      run: echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Run Code Quality Checks
      run: |
        echo "Running code quality analysis..."
        
        # Code formatting check
        black --check --diff run.py shop/ || echo "Formatting issues found"
        
        # Linting
        flake8 run.py shop/ --max-line-length=88 --extend-ignore=E203,W503,F401,E501,E402 || echo "Linting issues found"
        
        # Import sorting
        isort --check-only --diff run.py shop/ || echo "Import sorting issues found"

  security-gate:
    name: Security Gate Check
    runs-on: ubuntu-latest
    needs: [security-analysis, code-quality]
    steps:
    - name: Download Security Reports
      uses: actions/download-artifact@v4
      with:
        name: security-reports

    - name: Install jq for JSON Processing
      run: sudo apt-get update && sudo apt-get install -y jq

    - name: Evaluate Security Thresholds
      run: |
        echo "Evaluating security gate criteria..."
        
        # Check Bandit results
        if [ -f bandit_report.json ]; then
          HIGH_ISSUES=$(jq '[.results[] | select(.issue_severity == "HIGH")] | length' bandit_report.json 2>/dev/null || echo "0")
          MEDIUM_ISSUES=$(jq '[.results[] | select(.issue_severity == "MEDIUM")] | length' bandit_report.json 2>/dev/null || echo "0")
          echo "Bandit - High: $HIGH_ISSUES, Medium: $MEDIUM_ISSUES"
          
          if [ "$HIGH_ISSUES" -gt 0 ]; then
            echo "SECURITY GATE FAILED: High severity SAST issues found"
            exit 1
          fi
          
          if [ "$MEDIUM_ISSUES" -gt 3 ]; then
            echo "SECURITY GATE FAILED: Too many medium severity issues ($MEDIUM_ISSUES)"
            exit 1
          fi
        fi
        
        # Check Safety results
        if [ -f safety_report.txt ]; then
          SAFETY_VULNS=$(grep -c "vulnerability" safety_report.txt 2>/dev/null || echo "0")
          echo "Safety vulnerabilities: $SAFETY_VULNS"
          
          if [ "$SAFETY_VULNS" -gt 3 ]; then
            echo "SECURITY GATE FAILED: Too many dependency vulnerabilities ($SAFETY_VULNS)"
            exit 1
          fi
        fi
        
        # Check pip-audit results
        if [ -f pip_audit_report.txt ]; then
          PIP_VULNS=$(grep -c "vulnerability" pip_audit_report.txt 2>/dev/null || echo "0")
          echo "Pip-audit vulnerabilities: $PIP_VULNS"
          
          if [ "$PIP_VULNS" -gt 3 ]; then
            echo "SECURITY GATE FAILED: Critical pip-audit vulnerabilities ($PIP_VULNS)"
            exit 1
          fi
        fi
        
        echo "SECURITY GATE PASSED: Deployment approved"

  build-and-test:
    name: Build Application
    runs-on: ubuntu-latest
    needs: security-gate
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Restore Dependencies Cache
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          ~/.local/lib/python${{ env.PYTHON_VERSION }}/site-packages
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Test Application Build
      run: |
        echo "Testing application startup..."
        export SECRET_KEY="test_secret_key"
        export DATABASE_URL="sqlite:///test.db"
        mkdir -p instance
        
        # Test application can start
        timeout 15s python run.py || echo "Application startup test completed"

  deploy-and-dast:
    name: Deploy & Dynamic Security Testing
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Restore Dependencies Cache
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          ~/.local/lib/python${{ env.PYTHON_VERSION }}/site-packages
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Add Tools to PATH
      run: echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Deploy Application
      run: |
        echo "Deploying to staging environment..."
        export SECRET_KEY="staging_secret_key"
        export DATABASE_URL="sqlite:///instance/securecart.db"
        export DEBUG="False"
        mkdir -p instance
        
        # Initialize database
        python -c "
        from shop import app, db
        with app.app_context():
            db.create_all()
            print('Database initialized successfully')
        "
        
        # Start application in background
        python run.py &
        
        # Wait for application to be ready
        for i in {1..20}; do
          if curl -f http://localhost:5000 >/dev/null 2>&1; then
            echo "Application is ready for testing"
            break
          fi
          echo "Waiting for application... ($i/20)"
          sleep 3
        done

    - name: Run ZAP DAST Scan
      run: |
        echo "Running ZAP Dynamic Security Scan..."
        
        # Use ZAP Docker image for simpler setup
        docker run --network="host" -v $(pwd):/zap/wrk/:rw \
          -t ghcr.io/zaproxy/zaproxy:stable zap-baseline.py \
          -t http://localhost:5000 \
          -J zap_report.json \
          -r zap_report.html || echo "ZAP scan completed"

    - name: Run Wapiti DAST Scan
      run: |
        echo "Running Wapiti Dynamic Security Scan..."
        wapiti -u http://localhost:5000 --format txt --output wapiti_report.txt || echo "Wapiti scan completed"

    - name: Upload DAST Results
      uses: actions/upload-artifact@v4
      with:
        name: dast-reports
        path: |
          zap_report.json
          zap_report.html
          wapiti_report.txt

  dast-security-gate:
    name: DAST Security Gate
    runs-on: ubuntu-latest
    needs: deploy-and-dast
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Download DAST Reports
      uses: actions/download-artifact@v4
      with:
        name: dast-reports

    - name: Install jq for JSON Processing
      run: sudo apt-get update && sudo apt-get install -y jq

    - name: Evaluate DAST Results
      run: |
        echo "Evaluating dynamic security test results..."
        
        # Check ZAP results
        if [ -f zap_report.json ]; then
          HIGH_ALERTS=$(jq '[.site[]?.alerts[]? | select(.riskdesc? | startswith("High"))] | length' zap_report.json 2>/dev/null || echo "0")
          MEDIUM_ALERTS=$(jq '[.site[]?.alerts[]? | select(.riskdesc? | startswith("Medium"))] | length' zap_report.json 2>/dev/null || echo "0")
          
          echo "ZAP - High risk alerts: $HIGH_ALERTS, Medium risk alerts: $MEDIUM_ALERTS"
          
          if [ "$HIGH_ALERTS" -gt 0 ]; then
            echo "DAST SECURITY GATE FAILED: Critical vulnerabilities found ($HIGH_ALERTS)"
            exit 1
          fi
          
          if [ "$MEDIUM_ALERTS" -gt 5 ]; then
            echo "DAST SECURITY GATE WARNING: Many medium vulnerabilities ($MEDIUM_ALERTS)"
          fi
        fi
        
        # Check Wapiti results for critical vulnerabilities
        if [ -f wapiti_report.txt ]; then
          CRITICAL_WAPITI=$(grep -E "SQL Injection|Cross Site Scripting|Command execution" wapiti_report.txt | wc -l || echo "0")
          echo "Wapiti critical vulnerabilities: $CRITICAL_WAPITI"
          
          if [ "$CRITICAL_WAPITI" -gt 2 ]; then
            echo "DAST SECURITY GATE FAILED: Critical vulnerabilities in Wapiti ($CRITICAL_WAPITI)"
            exit 1
          fi
        fi
        
        echo "DAST SECURITY GATE PASSED: Dynamic security testing completed successfully"

  security-summary:
    name: Security Summary Report
    runs-on: ubuntu-latest
    needs: [security-analysis, deploy-and-dast, dast-security-gate]
    if: always()
    steps:
    - name: Download All Security Reports
      uses: actions/download-artifact@v4
      with:
        pattern: '*-reports'
        merge-multiple: true

    - name: Install jq for JSON Processing
      run: sudo apt-get update && sudo apt-get install -y jq

    - name: Generate Comprehensive Security Summary
      run: |
        echo "# SecureCart Security Pipeline Summary" > security_summary.md
        echo "" >> security_summary.md
        echo "**Build:** ${{ github.sha }}" >> security_summary.md
        echo "**Branch:** ${{ github.ref_name }}" >> security_summary.md
        echo "**Date:** $(date)" >> security_summary.md
        echo "**Workflow:** ${{ github.workflow }}" >> security_summary.md
        echo "" >> security_summary.md
        
        echo "## Security Testing Overview" >> security_summary.md
        echo "- ✅ Static Application Security Testing (SAST)" >> security_summary.md
        echo "- ✅ Software Composition Analysis (SCA)" >> security_summary.md
        echo "- ✅ Dynamic Application Security Testing (DAST)" >> security_summary.md
        echo "- ✅ Code Quality Analysis" >> security_summary.md
        echo "- ✅ Multi-layered Security Gates" >> security_summary.md
        echo "" >> security_summary.md
        
        echo "## SAST Results" >> security_summary.md
        if [ -f bandit_report.json ]; then
          BANDIT_ISSUES=$(jq '[.results[]] | length' bandit_report.json 2>/dev/null || echo "0")
          echo "- Bandit Issues Found: $BANDIT_ISSUES" >> security_summary.md
        fi
        echo "" >> security_summary.md
        
        echo "## SCA Results" >> security_summary.md
        if [ -f safety_report.txt ]; then
          SAFETY_VULNS=$(grep -c "vulnerability" safety_report.txt 2>/dev/null || echo "0")
          echo "- Safety Vulnerabilities: $SAFETY_VULNS" >> security_summary.md
        fi
        if [ -f pip_audit_report.txt ]; then
          PIP_VULNS=$(grep -c "vulnerability" pip_audit_report.txt 2>/dev/null || echo "0")
          echo "- Pip-Audit Vulnerabilities: $PIP_VULNS" >> security_summary.md
        fi
        echo "" >> security_summary.md
        
        echo "## DAST Results" >> security_summary.md
        if [ -f zap_report.json ]; then
          ZAP_ALERTS=$(jq '[.site[]?.alerts[]?] | length' zap_report.json 2>/dev/null || echo "0")
          echo "- ZAP Security Alerts: $ZAP_ALERTS" >> security_summary.md
        fi
        echo "" >> security_summary.md
        
        echo "## Generated Reports" >> security_summary.md
        echo '```' >> security_summary.md
        ls -la *.json *.txt *.html *.md 2>/dev/null || echo "No report files found"
        echo '```' >> security_summary.md
        
        echo "" >> security_summary.md
        echo "## Pipeline Status" >> security_summary.md
        echo "All security checks completed successfully! 🎉" >> security_summary.md
        
        # Display summary
        cat security_summary.md

    - name: Upload Complete Security Summary
      uses: actions/upload-artifact@v4
      with:
        name: complete-security-summary
        path: security_summary.md